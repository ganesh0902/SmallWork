/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.test.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.test.model.smallwork;

import com.test.service.persistence.smallworkPersistence;
import com.test.service.persistence.statusofsubmittedquotePersistence;
import com.test.service.smallworkLocalService;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the smallwork local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.test.service.impl.smallworkLocalServiceImpl}.
 * </p>
 *
 * @author dell
 * @see com.test.service.impl.smallworkLocalServiceImpl
 * @see com.test.service.smallworkLocalServiceUtil
 * @generated
 */
public abstract class smallworkLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements smallworkLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.test.service.smallworkLocalServiceUtil} to access the smallwork local service.
	 */

	/**
	 * Adds the smallwork to the database. Also notifies the appropriate model listeners.
	 *
	 * @param smallwork the smallwork
	 * @return the smallwork that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public smallwork addsmallwork(smallwork smallwork)
		throws SystemException {
		smallwork.setNew(true);

		return smallworkPersistence.update(smallwork);
	}

	/**
	 * Creates a new smallwork with the primary key. Does not add the smallwork to the database.
	 *
	 * @param id the primary key for the new smallwork
	 * @return the new smallwork
	 */
	@Override
	public smallwork createsmallwork(int id) {
		return smallworkPersistence.create(id);
	}

	/**
	 * Deletes the smallwork with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the smallwork
	 * @return the smallwork that was removed
	 * @throws PortalException if a smallwork with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public smallwork deletesmallwork(int id)
		throws PortalException, SystemException {
		return smallworkPersistence.remove(id);
	}

	/**
	 * Deletes the smallwork from the database. Also notifies the appropriate model listeners.
	 *
	 * @param smallwork the smallwork
	 * @return the smallwork that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public smallwork deletesmallwork(smallwork smallwork)
		throws SystemException {
		return smallworkPersistence.remove(smallwork);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(smallwork.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return smallworkPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.test.model.impl.smallworkModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return smallworkPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.test.model.impl.smallworkModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return smallworkPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return smallworkPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return smallworkPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public smallwork fetchsmallwork(int id) throws SystemException {
		return smallworkPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the smallwork with the primary key.
	 *
	 * @param id the primary key of the smallwork
	 * @return the smallwork
	 * @throws PortalException if a smallwork with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public smallwork getsmallwork(int id)
		throws PortalException, SystemException {
		return smallworkPersistence.findByPrimaryKey(id);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return smallworkPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the smallworks.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.test.model.impl.smallworkModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of smallworks
	 * @param end the upper bound of the range of smallworks (not inclusive)
	 * @return the range of smallworks
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<smallwork> getsmallworks(int start, int end)
		throws SystemException {
		return smallworkPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of smallworks.
	 *
	 * @return the number of smallworks
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getsmallworksCount() throws SystemException {
		return smallworkPersistence.countAll();
	}

	/**
	 * Updates the smallwork in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param smallwork the smallwork
	 * @return the smallwork that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public smallwork updatesmallwork(smallwork smallwork)
		throws SystemException {
		return smallworkPersistence.update(smallwork);
	}

	/**
	 * Returns the smallwork local service.
	 *
	 * @return the smallwork local service
	 */
	public com.test.service.smallworkLocalService getsmallworkLocalService() {
		return smallworkLocalService;
	}

	/**
	 * Sets the smallwork local service.
	 *
	 * @param smallworkLocalService the smallwork local service
	 */
	public void setsmallworkLocalService(
		com.test.service.smallworkLocalService smallworkLocalService) {
		this.smallworkLocalService = smallworkLocalService;
	}

	/**
	 * Returns the smallwork remote service.
	 *
	 * @return the smallwork remote service
	 */
	public com.test.service.smallworkService getsmallworkService() {
		return smallworkService;
	}

	/**
	 * Sets the smallwork remote service.
	 *
	 * @param smallworkService the smallwork remote service
	 */
	public void setsmallworkService(
		com.test.service.smallworkService smallworkService) {
		this.smallworkService = smallworkService;
	}

	/**
	 * Returns the smallwork persistence.
	 *
	 * @return the smallwork persistence
	 */
	public smallworkPersistence getsmallworkPersistence() {
		return smallworkPersistence;
	}

	/**
	 * Sets the smallwork persistence.
	 *
	 * @param smallworkPersistence the smallwork persistence
	 */
	public void setsmallworkPersistence(
		smallworkPersistence smallworkPersistence) {
		this.smallworkPersistence = smallworkPersistence;
	}

	/**
	 * Returns the statusofsubmittedquote local service.
	 *
	 * @return the statusofsubmittedquote local service
	 */
	public com.test.service.statusofsubmittedquoteLocalService getstatusofsubmittedquoteLocalService() {
		return statusofsubmittedquoteLocalService;
	}

	/**
	 * Sets the statusofsubmittedquote local service.
	 *
	 * @param statusofsubmittedquoteLocalService the statusofsubmittedquote local service
	 */
	public void setstatusofsubmittedquoteLocalService(
		com.test.service.statusofsubmittedquoteLocalService statusofsubmittedquoteLocalService) {
		this.statusofsubmittedquoteLocalService = statusofsubmittedquoteLocalService;
	}

	/**
	 * Returns the statusofsubmittedquote remote service.
	 *
	 * @return the statusofsubmittedquote remote service
	 */
	public com.test.service.statusofsubmittedquoteService getstatusofsubmittedquoteService() {
		return statusofsubmittedquoteService;
	}

	/**
	 * Sets the statusofsubmittedquote remote service.
	 *
	 * @param statusofsubmittedquoteService the statusofsubmittedquote remote service
	 */
	public void setstatusofsubmittedquoteService(
		com.test.service.statusofsubmittedquoteService statusofsubmittedquoteService) {
		this.statusofsubmittedquoteService = statusofsubmittedquoteService;
	}

	/**
	 * Returns the statusofsubmittedquote persistence.
	 *
	 * @return the statusofsubmittedquote persistence
	 */
	public statusofsubmittedquotePersistence getstatusofsubmittedquotePersistence() {
		return statusofsubmittedquotePersistence;
	}

	/**
	 * Sets the statusofsubmittedquote persistence.
	 *
	 * @param statusofsubmittedquotePersistence the statusofsubmittedquote persistence
	 */
	public void setstatusofsubmittedquotePersistence(
		statusofsubmittedquotePersistence statusofsubmittedquotePersistence) {
		this.statusofsubmittedquotePersistence = statusofsubmittedquotePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.test.model.smallwork",
			smallworkLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.test.model.smallwork");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return smallwork.class;
	}

	protected String getModelClassName() {
		return smallwork.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = smallworkPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.test.service.smallworkLocalService.class)
	protected com.test.service.smallworkLocalService smallworkLocalService;
	@BeanReference(type = com.test.service.smallworkService.class)
	protected com.test.service.smallworkService smallworkService;
	@BeanReference(type = smallworkPersistence.class)
	protected smallworkPersistence smallworkPersistence;
	@BeanReference(type = com.test.service.statusofsubmittedquoteLocalService.class)
	protected com.test.service.statusofsubmittedquoteLocalService statusofsubmittedquoteLocalService;
	@BeanReference(type = com.test.service.statusofsubmittedquoteService.class)
	protected com.test.service.statusofsubmittedquoteService statusofsubmittedquoteService;
	@BeanReference(type = statusofsubmittedquotePersistence.class)
	protected statusofsubmittedquotePersistence statusofsubmittedquotePersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private smallworkLocalServiceClpInvoker _clpInvoker = new smallworkLocalServiceClpInvoker();
}