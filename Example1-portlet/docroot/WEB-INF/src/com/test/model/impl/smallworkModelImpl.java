/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.test.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.test.model.smallwork;
import com.test.model.smallworkModel;
import com.test.model.smallworkSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the smallwork service. Represents a row in the &quot;smallwork&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.test.model.smallworkModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link smallworkImpl}.
 * </p>
 *
 * @author dell
 * @see smallworkImpl
 * @see com.test.model.smallwork
 * @see com.test.model.smallworkModel
 * @generated
 */
@JSON(strict = true)
public class smallworkModelImpl extends BaseModelImpl<smallwork>
	implements smallworkModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a smallwork model instance should use the {@link com.test.model.smallwork} interface instead.
	 */
	public static final String TABLE_NAME = "smallwork";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.INTEGER },
			{ "quoteReference", Types.VARCHAR },
			{ "projectName", Types.VARCHAR },
			{ "customerAddress", Types.VARCHAR },
			{ "workType", Types.VARCHAR },
			{ "leadSource", Types.VARCHAR },
			{ "productSpecific", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "customerName", Types.VARCHAR },
			{ "postcode", Types.VARCHAR },
			{ "sitename", Types.VARCHAR },
			{ "lead", Types.VARCHAR },
			{ "location", Types.VARCHAR },
			{ "enduser", Types.VARCHAR },
			{ "contactName", Types.VARCHAR },
			{ "phone", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "projectDate", Types.VARCHAR },
			{ "anticipatedDate", Types.VARCHAR },
			{ "endDate", Types.VARCHAR },
			{ "endDate2", Types.VARCHAR },
			{ "bidInfor", Types.VARCHAR },
			{ "quotationName", Types.VARCHAR },
			{ "projectCost", Types.INTEGER },
			{ "dateShowOnQuote", Types.VARCHAR },
			{ "projectSell", Types.INTEGER },
			{ "quoteSubmitDate", Types.VARCHAR },
			{ "winProbability", Types.VARCHAR },
			{ "stage", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table smallwork (id_ INTEGER not null primary key,quoteReference VARCHAR(75) null,projectName VARCHAR(75) null,customerAddress VARCHAR(75) null,workType VARCHAR(75) null,leadSource VARCHAR(75) null,productSpecific VARCHAR(75) null,description VARCHAR(75) null,customerName VARCHAR(75) null,postcode VARCHAR(75) null,sitename VARCHAR(75) null,lead VARCHAR(75) null,location VARCHAR(75) null,enduser VARCHAR(75) null,contactName VARCHAR(75) null,phone VARCHAR(75) null,email VARCHAR(75) null,projectDate VARCHAR(75) null,anticipatedDate VARCHAR(75) null,endDate VARCHAR(75) null,endDate2 VARCHAR(75) null,bidInfor VARCHAR(75) null,quotationName VARCHAR(75) null,projectCost INTEGER,dateShowOnQuote VARCHAR(75) null,projectSell INTEGER,quoteSubmitDate VARCHAR(75) null,winProbability VARCHAR(75) null,stage VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table smallwork";
	public static final String ORDER_BY_JPQL = " ORDER BY smallwork.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY smallwork.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.test.model.smallwork"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.test.model.smallwork"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static smallwork toModel(smallworkSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		smallwork model = new smallworkImpl();

		model.setId(soapModel.getId());
		model.setQuoteReference(soapModel.getQuoteReference());
		model.setProjectName(soapModel.getProjectName());
		model.setCustomerAddress(soapModel.getCustomerAddress());
		model.setWorkType(soapModel.getWorkType());
		model.setLeadSource(soapModel.getLeadSource());
		model.setProductSpecific(soapModel.getProductSpecific());
		model.setDescription(soapModel.getDescription());
		model.setCustomerName(soapModel.getCustomerName());
		model.setPostcode(soapModel.getPostcode());
		model.setSitename(soapModel.getSitename());
		model.setLead(soapModel.getLead());
		model.setLocation(soapModel.getLocation());
		model.setEnduser(soapModel.getEnduser());
		model.setContactName(soapModel.getContactName());
		model.setPhone(soapModel.getPhone());
		model.setEmail(soapModel.getEmail());
		model.setProjectDate(soapModel.getProjectDate());
		model.setAnticipatedDate(soapModel.getAnticipatedDate());
		model.setEndDate(soapModel.getEndDate());
		model.setEndDate2(soapModel.getEndDate2());
		model.setBidInfor(soapModel.getBidInfor());
		model.setQuotationName(soapModel.getQuotationName());
		model.setProjectCost(soapModel.getProjectCost());
		model.setDateShowOnQuote(soapModel.getDateShowOnQuote());
		model.setProjectSell(soapModel.getProjectSell());
		model.setQuoteSubmitDate(soapModel.getQuoteSubmitDate());
		model.setWinProbability(soapModel.getWinProbability());
		model.setStage(soapModel.getStage());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<smallwork> toModels(smallworkSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<smallwork> models = new ArrayList<smallwork>(soapModels.length);

		for (smallworkSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.test.model.smallwork"));

	public smallworkModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return smallwork.class;
	}

	@Override
	public String getModelClassName() {
		return smallwork.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("quoteReference", getQuoteReference());
		attributes.put("projectName", getProjectName());
		attributes.put("customerAddress", getCustomerAddress());
		attributes.put("workType", getWorkType());
		attributes.put("leadSource", getLeadSource());
		attributes.put("productSpecific", getProductSpecific());
		attributes.put("description", getDescription());
		attributes.put("customerName", getCustomerName());
		attributes.put("postcode", getPostcode());
		attributes.put("sitename", getSitename());
		attributes.put("lead", getLead());
		attributes.put("location", getLocation());
		attributes.put("enduser", getEnduser());
		attributes.put("contactName", getContactName());
		attributes.put("phone", getPhone());
		attributes.put("email", getEmail());
		attributes.put("projectDate", getProjectDate());
		attributes.put("anticipatedDate", getAnticipatedDate());
		attributes.put("endDate", getEndDate());
		attributes.put("endDate2", getEndDate2());
		attributes.put("bidInfor", getBidInfor());
		attributes.put("quotationName", getQuotationName());
		attributes.put("projectCost", getProjectCost());
		attributes.put("dateShowOnQuote", getDateShowOnQuote());
		attributes.put("projectSell", getProjectSell());
		attributes.put("quoteSubmitDate", getQuoteSubmitDate());
		attributes.put("winProbability", getWinProbability());
		attributes.put("stage", getStage());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer id = (Integer)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String quoteReference = (String)attributes.get("quoteReference");

		if (quoteReference != null) {
			setQuoteReference(quoteReference);
		}

		String projectName = (String)attributes.get("projectName");

		if (projectName != null) {
			setProjectName(projectName);
		}

		String customerAddress = (String)attributes.get("customerAddress");

		if (customerAddress != null) {
			setCustomerAddress(customerAddress);
		}

		String workType = (String)attributes.get("workType");

		if (workType != null) {
			setWorkType(workType);
		}

		String leadSource = (String)attributes.get("leadSource");

		if (leadSource != null) {
			setLeadSource(leadSource);
		}

		String productSpecific = (String)attributes.get("productSpecific");

		if (productSpecific != null) {
			setProductSpecific(productSpecific);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String customerName = (String)attributes.get("customerName");

		if (customerName != null) {
			setCustomerName(customerName);
		}

		String postcode = (String)attributes.get("postcode");

		if (postcode != null) {
			setPostcode(postcode);
		}

		String sitename = (String)attributes.get("sitename");

		if (sitename != null) {
			setSitename(sitename);
		}

		String lead = (String)attributes.get("lead");

		if (lead != null) {
			setLead(lead);
		}

		String location = (String)attributes.get("location");

		if (location != null) {
			setLocation(location);
		}

		String enduser = (String)attributes.get("enduser");

		if (enduser != null) {
			setEnduser(enduser);
		}

		String contactName = (String)attributes.get("contactName");

		if (contactName != null) {
			setContactName(contactName);
		}

		String phone = (String)attributes.get("phone");

		if (phone != null) {
			setPhone(phone);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String projectDate = (String)attributes.get("projectDate");

		if (projectDate != null) {
			setProjectDate(projectDate);
		}

		String anticipatedDate = (String)attributes.get("anticipatedDate");

		if (anticipatedDate != null) {
			setAnticipatedDate(anticipatedDate);
		}

		String endDate = (String)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		String endDate2 = (String)attributes.get("endDate2");

		if (endDate2 != null) {
			setEndDate2(endDate2);
		}

		String bidInfor = (String)attributes.get("bidInfor");

		if (bidInfor != null) {
			setBidInfor(bidInfor);
		}

		String quotationName = (String)attributes.get("quotationName");

		if (quotationName != null) {
			setQuotationName(quotationName);
		}

		Integer projectCost = (Integer)attributes.get("projectCost");

		if (projectCost != null) {
			setProjectCost(projectCost);
		}

		String dateShowOnQuote = (String)attributes.get("dateShowOnQuote");

		if (dateShowOnQuote != null) {
			setDateShowOnQuote(dateShowOnQuote);
		}

		Integer projectSell = (Integer)attributes.get("projectSell");

		if (projectSell != null) {
			setProjectSell(projectSell);
		}

		String quoteSubmitDate = (String)attributes.get("quoteSubmitDate");

		if (quoteSubmitDate != null) {
			setQuoteSubmitDate(quoteSubmitDate);
		}

		String winProbability = (String)attributes.get("winProbability");

		if (winProbability != null) {
			setWinProbability(winProbability);
		}

		String stage = (String)attributes.get("stage");

		if (stage != null) {
			setStage(stage);
		}
	}

	@JSON
	@Override
	public int getId() {
		return _id;
	}

	@Override
	public void setId(int id) {
		_id = id;
	}

	@JSON
	@Override
	public String getQuoteReference() {
		if (_quoteReference == null) {
			return StringPool.BLANK;
		}
		else {
			return _quoteReference;
		}
	}

	@Override
	public void setQuoteReference(String quoteReference) {
		_quoteReference = quoteReference;
	}

	@JSON
	@Override
	public String getProjectName() {
		if (_projectName == null) {
			return StringPool.BLANK;
		}
		else {
			return _projectName;
		}
	}

	@Override
	public void setProjectName(String projectName) {
		_projectName = projectName;
	}

	@JSON
	@Override
	public String getCustomerAddress() {
		if (_customerAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _customerAddress;
		}
	}

	@Override
	public void setCustomerAddress(String customerAddress) {
		_customerAddress = customerAddress;
	}

	@JSON
	@Override
	public String getWorkType() {
		if (_workType == null) {
			return StringPool.BLANK;
		}
		else {
			return _workType;
		}
	}

	@Override
	public void setWorkType(String workType) {
		_workType = workType;
	}

	@JSON
	@Override
	public String getLeadSource() {
		if (_leadSource == null) {
			return StringPool.BLANK;
		}
		else {
			return _leadSource;
		}
	}

	@Override
	public void setLeadSource(String leadSource) {
		_leadSource = leadSource;
	}

	@JSON
	@Override
	public String getProductSpecific() {
		if (_productSpecific == null) {
			return StringPool.BLANK;
		}
		else {
			return _productSpecific;
		}
	}

	@Override
	public void setProductSpecific(String productSpecific) {
		_productSpecific = productSpecific;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getCustomerName() {
		if (_customerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _customerName;
		}
	}

	@Override
	public void setCustomerName(String customerName) {
		_customerName = customerName;
	}

	@JSON
	@Override
	public String getPostcode() {
		if (_postcode == null) {
			return StringPool.BLANK;
		}
		else {
			return _postcode;
		}
	}

	@Override
	public void setPostcode(String postcode) {
		_postcode = postcode;
	}

	@JSON
	@Override
	public String getSitename() {
		if (_sitename == null) {
			return StringPool.BLANK;
		}
		else {
			return _sitename;
		}
	}

	@Override
	public void setSitename(String sitename) {
		_sitename = sitename;
	}

	@JSON
	@Override
	public String getLead() {
		if (_lead == null) {
			return StringPool.BLANK;
		}
		else {
			return _lead;
		}
	}

	@Override
	public void setLead(String lead) {
		_lead = lead;
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return StringPool.BLANK;
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		_location = location;
	}

	@JSON
	@Override
	public String getEnduser() {
		if (_enduser == null) {
			return StringPool.BLANK;
		}
		else {
			return _enduser;
		}
	}

	@Override
	public void setEnduser(String enduser) {
		_enduser = enduser;
	}

	@JSON
	@Override
	public String getContactName() {
		if (_contactName == null) {
			return StringPool.BLANK;
		}
		else {
			return _contactName;
		}
	}

	@Override
	public void setContactName(String contactName) {
		_contactName = contactName;
	}

	@JSON
	@Override
	public String getPhone() {
		if (_phone == null) {
			return StringPool.BLANK;
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		_phone = phone;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public String getProjectDate() {
		if (_projectDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _projectDate;
		}
	}

	@Override
	public void setProjectDate(String projectDate) {
		_projectDate = projectDate;
	}

	@JSON
	@Override
	public String getAnticipatedDate() {
		if (_anticipatedDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _anticipatedDate;
		}
	}

	@Override
	public void setAnticipatedDate(String anticipatedDate) {
		_anticipatedDate = anticipatedDate;
	}

	@JSON
	@Override
	public String getEndDate() {
		if (_endDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _endDate;
		}
	}

	@Override
	public void setEndDate(String endDate) {
		_endDate = endDate;
	}

	@JSON
	@Override
	public String getEndDate2() {
		if (_endDate2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _endDate2;
		}
	}

	@Override
	public void setEndDate2(String endDate2) {
		_endDate2 = endDate2;
	}

	@JSON
	@Override
	public String getBidInfor() {
		if (_bidInfor == null) {
			return StringPool.BLANK;
		}
		else {
			return _bidInfor;
		}
	}

	@Override
	public void setBidInfor(String bidInfor) {
		_bidInfor = bidInfor;
	}

	@JSON
	@Override
	public String getQuotationName() {
		if (_quotationName == null) {
			return StringPool.BLANK;
		}
		else {
			return _quotationName;
		}
	}

	@Override
	public void setQuotationName(String quotationName) {
		_quotationName = quotationName;
	}

	@JSON
	@Override
	public int getProjectCost() {
		return _projectCost;
	}

	@Override
	public void setProjectCost(int projectCost) {
		_projectCost = projectCost;
	}

	@JSON
	@Override
	public String getDateShowOnQuote() {
		if (_dateShowOnQuote == null) {
			return StringPool.BLANK;
		}
		else {
			return _dateShowOnQuote;
		}
	}

	@Override
	public void setDateShowOnQuote(String dateShowOnQuote) {
		_dateShowOnQuote = dateShowOnQuote;
	}

	@JSON
	@Override
	public int getProjectSell() {
		return _projectSell;
	}

	@Override
	public void setProjectSell(int projectSell) {
		_projectSell = projectSell;
	}

	@JSON
	@Override
	public String getQuoteSubmitDate() {
		if (_quoteSubmitDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _quoteSubmitDate;
		}
	}

	@Override
	public void setQuoteSubmitDate(String quoteSubmitDate) {
		_quoteSubmitDate = quoteSubmitDate;
	}

	@JSON
	@Override
	public String getWinProbability() {
		if (_winProbability == null) {
			return StringPool.BLANK;
		}
		else {
			return _winProbability;
		}
	}

	@Override
	public void setWinProbability(String winProbability) {
		_winProbability = winProbability;
	}

	@JSON
	@Override
	public String getStage() {
		if (_stage == null) {
			return StringPool.BLANK;
		}
		else {
			return _stage;
		}
	}

	@Override
	public void setStage(String stage) {
		_stage = stage;
	}

	@Override
	public smallwork toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (smallwork)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		smallworkImpl smallworkImpl = new smallworkImpl();

		smallworkImpl.setId(getId());
		smallworkImpl.setQuoteReference(getQuoteReference());
		smallworkImpl.setProjectName(getProjectName());
		smallworkImpl.setCustomerAddress(getCustomerAddress());
		smallworkImpl.setWorkType(getWorkType());
		smallworkImpl.setLeadSource(getLeadSource());
		smallworkImpl.setProductSpecific(getProductSpecific());
		smallworkImpl.setDescription(getDescription());
		smallworkImpl.setCustomerName(getCustomerName());
		smallworkImpl.setPostcode(getPostcode());
		smallworkImpl.setSitename(getSitename());
		smallworkImpl.setLead(getLead());
		smallworkImpl.setLocation(getLocation());
		smallworkImpl.setEnduser(getEnduser());
		smallworkImpl.setContactName(getContactName());
		smallworkImpl.setPhone(getPhone());
		smallworkImpl.setEmail(getEmail());
		smallworkImpl.setProjectDate(getProjectDate());
		smallworkImpl.setAnticipatedDate(getAnticipatedDate());
		smallworkImpl.setEndDate(getEndDate());
		smallworkImpl.setEndDate2(getEndDate2());
		smallworkImpl.setBidInfor(getBidInfor());
		smallworkImpl.setQuotationName(getQuotationName());
		smallworkImpl.setProjectCost(getProjectCost());
		smallworkImpl.setDateShowOnQuote(getDateShowOnQuote());
		smallworkImpl.setProjectSell(getProjectSell());
		smallworkImpl.setQuoteSubmitDate(getQuoteSubmitDate());
		smallworkImpl.setWinProbability(getWinProbability());
		smallworkImpl.setStage(getStage());

		smallworkImpl.resetOriginalValues();

		return smallworkImpl;
	}

	@Override
	public int compareTo(smallwork smallwork) {
		int primaryKey = smallwork.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof smallwork)) {
			return false;
		}

		smallwork smallwork = (smallwork)obj;

		int primaryKey = smallwork.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<smallwork> toCacheModel() {
		smallworkCacheModel smallworkCacheModel = new smallworkCacheModel();

		smallworkCacheModel.id = getId();

		smallworkCacheModel.quoteReference = getQuoteReference();

		String quoteReference = smallworkCacheModel.quoteReference;

		if ((quoteReference != null) && (quoteReference.length() == 0)) {
			smallworkCacheModel.quoteReference = null;
		}

		smallworkCacheModel.projectName = getProjectName();

		String projectName = smallworkCacheModel.projectName;

		if ((projectName != null) && (projectName.length() == 0)) {
			smallworkCacheModel.projectName = null;
		}

		smallworkCacheModel.customerAddress = getCustomerAddress();

		String customerAddress = smallworkCacheModel.customerAddress;

		if ((customerAddress != null) && (customerAddress.length() == 0)) {
			smallworkCacheModel.customerAddress = null;
		}

		smallworkCacheModel.workType = getWorkType();

		String workType = smallworkCacheModel.workType;

		if ((workType != null) && (workType.length() == 0)) {
			smallworkCacheModel.workType = null;
		}

		smallworkCacheModel.leadSource = getLeadSource();

		String leadSource = smallworkCacheModel.leadSource;

		if ((leadSource != null) && (leadSource.length() == 0)) {
			smallworkCacheModel.leadSource = null;
		}

		smallworkCacheModel.productSpecific = getProductSpecific();

		String productSpecific = smallworkCacheModel.productSpecific;

		if ((productSpecific != null) && (productSpecific.length() == 0)) {
			smallworkCacheModel.productSpecific = null;
		}

		smallworkCacheModel.description = getDescription();

		String description = smallworkCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			smallworkCacheModel.description = null;
		}

		smallworkCacheModel.customerName = getCustomerName();

		String customerName = smallworkCacheModel.customerName;

		if ((customerName != null) && (customerName.length() == 0)) {
			smallworkCacheModel.customerName = null;
		}

		smallworkCacheModel.postcode = getPostcode();

		String postcode = smallworkCacheModel.postcode;

		if ((postcode != null) && (postcode.length() == 0)) {
			smallworkCacheModel.postcode = null;
		}

		smallworkCacheModel.sitename = getSitename();

		String sitename = smallworkCacheModel.sitename;

		if ((sitename != null) && (sitename.length() == 0)) {
			smallworkCacheModel.sitename = null;
		}

		smallworkCacheModel.lead = getLead();

		String lead = smallworkCacheModel.lead;

		if ((lead != null) && (lead.length() == 0)) {
			smallworkCacheModel.lead = null;
		}

		smallworkCacheModel.location = getLocation();

		String location = smallworkCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			smallworkCacheModel.location = null;
		}

		smallworkCacheModel.enduser = getEnduser();

		String enduser = smallworkCacheModel.enduser;

		if ((enduser != null) && (enduser.length() == 0)) {
			smallworkCacheModel.enduser = null;
		}

		smallworkCacheModel.contactName = getContactName();

		String contactName = smallworkCacheModel.contactName;

		if ((contactName != null) && (contactName.length() == 0)) {
			smallworkCacheModel.contactName = null;
		}

		smallworkCacheModel.phone = getPhone();

		String phone = smallworkCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			smallworkCacheModel.phone = null;
		}

		smallworkCacheModel.email = getEmail();

		String email = smallworkCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			smallworkCacheModel.email = null;
		}

		smallworkCacheModel.projectDate = getProjectDate();

		String projectDate = smallworkCacheModel.projectDate;

		if ((projectDate != null) && (projectDate.length() == 0)) {
			smallworkCacheModel.projectDate = null;
		}

		smallworkCacheModel.anticipatedDate = getAnticipatedDate();

		String anticipatedDate = smallworkCacheModel.anticipatedDate;

		if ((anticipatedDate != null) && (anticipatedDate.length() == 0)) {
			smallworkCacheModel.anticipatedDate = null;
		}

		smallworkCacheModel.endDate = getEndDate();

		String endDate = smallworkCacheModel.endDate;

		if ((endDate != null) && (endDate.length() == 0)) {
			smallworkCacheModel.endDate = null;
		}

		smallworkCacheModel.endDate2 = getEndDate2();

		String endDate2 = smallworkCacheModel.endDate2;

		if ((endDate2 != null) && (endDate2.length() == 0)) {
			smallworkCacheModel.endDate2 = null;
		}

		smallworkCacheModel.bidInfor = getBidInfor();

		String bidInfor = smallworkCacheModel.bidInfor;

		if ((bidInfor != null) && (bidInfor.length() == 0)) {
			smallworkCacheModel.bidInfor = null;
		}

		smallworkCacheModel.quotationName = getQuotationName();

		String quotationName = smallworkCacheModel.quotationName;

		if ((quotationName != null) && (quotationName.length() == 0)) {
			smallworkCacheModel.quotationName = null;
		}

		smallworkCacheModel.projectCost = getProjectCost();

		smallworkCacheModel.dateShowOnQuote = getDateShowOnQuote();

		String dateShowOnQuote = smallworkCacheModel.dateShowOnQuote;

		if ((dateShowOnQuote != null) && (dateShowOnQuote.length() == 0)) {
			smallworkCacheModel.dateShowOnQuote = null;
		}

		smallworkCacheModel.projectSell = getProjectSell();

		smallworkCacheModel.quoteSubmitDate = getQuoteSubmitDate();

		String quoteSubmitDate = smallworkCacheModel.quoteSubmitDate;

		if ((quoteSubmitDate != null) && (quoteSubmitDate.length() == 0)) {
			smallworkCacheModel.quoteSubmitDate = null;
		}

		smallworkCacheModel.winProbability = getWinProbability();

		String winProbability = smallworkCacheModel.winProbability;

		if ((winProbability != null) && (winProbability.length() == 0)) {
			smallworkCacheModel.winProbability = null;
		}

		smallworkCacheModel.stage = getStage();

		String stage = smallworkCacheModel.stage;

		if ((stage != null) && (stage.length() == 0)) {
			smallworkCacheModel.stage = null;
		}

		return smallworkCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(59);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", quoteReference=");
		sb.append(getQuoteReference());
		sb.append(", projectName=");
		sb.append(getProjectName());
		sb.append(", customerAddress=");
		sb.append(getCustomerAddress());
		sb.append(", workType=");
		sb.append(getWorkType());
		sb.append(", leadSource=");
		sb.append(getLeadSource());
		sb.append(", productSpecific=");
		sb.append(getProductSpecific());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", customerName=");
		sb.append(getCustomerName());
		sb.append(", postcode=");
		sb.append(getPostcode());
		sb.append(", sitename=");
		sb.append(getSitename());
		sb.append(", lead=");
		sb.append(getLead());
		sb.append(", location=");
		sb.append(getLocation());
		sb.append(", enduser=");
		sb.append(getEnduser());
		sb.append(", contactName=");
		sb.append(getContactName());
		sb.append(", phone=");
		sb.append(getPhone());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", projectDate=");
		sb.append(getProjectDate());
		sb.append(", anticipatedDate=");
		sb.append(getAnticipatedDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", endDate2=");
		sb.append(getEndDate2());
		sb.append(", bidInfor=");
		sb.append(getBidInfor());
		sb.append(", quotationName=");
		sb.append(getQuotationName());
		sb.append(", projectCost=");
		sb.append(getProjectCost());
		sb.append(", dateShowOnQuote=");
		sb.append(getDateShowOnQuote());
		sb.append(", projectSell=");
		sb.append(getProjectSell());
		sb.append(", quoteSubmitDate=");
		sb.append(getQuoteSubmitDate());
		sb.append(", winProbability=");
		sb.append(getWinProbability());
		sb.append(", stage=");
		sb.append(getStage());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(91);

		sb.append("<model><model-name>");
		sb.append("com.test.model.smallwork");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quoteReference</column-name><column-value><![CDATA[");
		sb.append(getQuoteReference());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectName</column-name><column-value><![CDATA[");
		sb.append(getProjectName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerAddress</column-name><column-value><![CDATA[");
		sb.append(getCustomerAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workType</column-name><column-value><![CDATA[");
		sb.append(getWorkType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leadSource</column-name><column-value><![CDATA[");
		sb.append(getLeadSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productSpecific</column-name><column-value><![CDATA[");
		sb.append(getProductSpecific());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerName</column-name><column-value><![CDATA[");
		sb.append(getCustomerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postcode</column-name><column-value><![CDATA[");
		sb.append(getPostcode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sitename</column-name><column-value><![CDATA[");
		sb.append(getSitename());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lead</column-name><column-value><![CDATA[");
		sb.append(getLead());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>location</column-name><column-value><![CDATA[");
		sb.append(getLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>enduser</column-name><column-value><![CDATA[");
		sb.append(getEnduser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactName</column-name><column-value><![CDATA[");
		sb.append(getContactName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phone</column-name><column-value><![CDATA[");
		sb.append(getPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectDate</column-name><column-value><![CDATA[");
		sb.append(getProjectDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>anticipatedDate</column-name><column-value><![CDATA[");
		sb.append(getAnticipatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate2</column-name><column-value><![CDATA[");
		sb.append(getEndDate2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bidInfor</column-name><column-value><![CDATA[");
		sb.append(getBidInfor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quotationName</column-name><column-value><![CDATA[");
		sb.append(getQuotationName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectCost</column-name><column-value><![CDATA[");
		sb.append(getProjectCost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateShowOnQuote</column-name><column-value><![CDATA[");
		sb.append(getDateShowOnQuote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectSell</column-name><column-value><![CDATA[");
		sb.append(getProjectSell());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quoteSubmitDate</column-name><column-value><![CDATA[");
		sb.append(getQuoteSubmitDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>winProbability</column-name><column-value><![CDATA[");
		sb.append(getWinProbability());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stage</column-name><column-value><![CDATA[");
		sb.append(getStage());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = smallwork.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			smallwork.class
		};
	private int _id;
	private String _quoteReference;
	private String _projectName;
	private String _customerAddress;
	private String _workType;
	private String _leadSource;
	private String _productSpecific;
	private String _description;
	private String _customerName;
	private String _postcode;
	private String _sitename;
	private String _lead;
	private String _location;
	private String _enduser;
	private String _contactName;
	private String _phone;
	private String _email;
	private String _projectDate;
	private String _anticipatedDate;
	private String _endDate;
	private String _endDate2;
	private String _bidInfor;
	private String _quotationName;
	private int _projectCost;
	private String _dateShowOnQuote;
	private int _projectSell;
	private String _quoteSubmitDate;
	private String _winProbability;
	private String _stage;
	private smallwork _escapedModel;
}