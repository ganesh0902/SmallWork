/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.test.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.test.model.statusofsubmittedquote;
import com.test.model.statusofsubmittedquoteModel;
import com.test.model.statusofsubmittedquoteSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the statusofsubmittedquote service. Represents a row in the &quot;statusofsubmittedquote&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.test.model.statusofsubmittedquoteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link statusofsubmittedquoteImpl}.
 * </p>
 *
 * @author dell
 * @see statusofsubmittedquoteImpl
 * @see com.test.model.statusofsubmittedquote
 * @see com.test.model.statusofsubmittedquoteModel
 * @generated
 */
@JSON(strict = true)
public class statusofsubmittedquoteModelImpl extends BaseModelImpl<statusofsubmittedquote>
	implements statusofsubmittedquoteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a statusofsubmittedquote model instance should use the {@link com.test.model.statusofsubmittedquote} interface instead.
	 */
	public static final String TABLE_NAME = "statusofsubmittedquote";
	public static final Object[][] TABLE_COLUMNS = {
			{ "sosqId", Types.BIGINT },
			{ "sosq", Types.VARCHAR },
			{ "winprob", Types.VARCHAR },
			{ "aorderdate", Types.VARCHAR },
			{ "ppstartdate", Types.VARCHAR },
			{ "ppenddate", Types.VARCHAR },
			{ "createDate", Types.VARCHAR },
			{ "customercomittype", Types.VARCHAR },
			{ "upload", Types.VARCHAR },
			{ "pon", Types.BIGINT },
			{ "valueofcommit", Types.BIGINT },
			{ "rmethod", Types.VARCHAR },
			{ "rdate", Types.VARCHAR },
			{ "pcdc", Types.VARCHAR },
			{ "onwhatbasis", Types.VARCHAR },
			{ "recordproposedcourse", Types.VARCHAR },
			{ "comments", Types.VARCHAR },
			{ "currrentId", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table statusofsubmittedquote (sosqId LONG not null primary key,sosq VARCHAR(75) null,winprob VARCHAR(75) null,aorderdate VARCHAR(75) null,ppstartdate VARCHAR(75) null,ppenddate VARCHAR(75) null,createDate VARCHAR(75) null,customercomittype VARCHAR(75) null,upload VARCHAR(75) null,pon LONG,valueofcommit LONG,rmethod VARCHAR(75) null,rdate VARCHAR(75) null,pcdc VARCHAR(75) null,onwhatbasis VARCHAR(75) null,recordproposedcourse VARCHAR(75) null,comments VARCHAR(75) null,currrentId INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table statusofsubmittedquote";
	public static final String ORDER_BY_JPQL = " ORDER BY statusofsubmittedquote.sosqId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY statusofsubmittedquote.sosqId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.test.model.statusofsubmittedquote"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.test.model.statusofsubmittedquote"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static statusofsubmittedquote toModel(
		statusofsubmittedquoteSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		statusofsubmittedquote model = new statusofsubmittedquoteImpl();

		model.setSosqId(soapModel.getSosqId());
		model.setSosq(soapModel.getSosq());
		model.setWinprob(soapModel.getWinprob());
		model.setAorderdate(soapModel.getAorderdate());
		model.setPpstartdate(soapModel.getPpstartdate());
		model.setPpenddate(soapModel.getPpenddate());
		model.setCreateDate(soapModel.getCreateDate());
		model.setCustomercomittype(soapModel.getCustomercomittype());
		model.setUpload(soapModel.getUpload());
		model.setPon(soapModel.getPon());
		model.setValueofcommit(soapModel.getValueofcommit());
		model.setRmethod(soapModel.getRmethod());
		model.setRdate(soapModel.getRdate());
		model.setPcdc(soapModel.getPcdc());
		model.setOnwhatbasis(soapModel.getOnwhatbasis());
		model.setRecordproposedcourse(soapModel.getRecordproposedcourse());
		model.setComments(soapModel.getComments());
		model.setCurrrentId(soapModel.getCurrrentId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<statusofsubmittedquote> toModels(
		statusofsubmittedquoteSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<statusofsubmittedquote> models = new ArrayList<statusofsubmittedquote>(soapModels.length);

		for (statusofsubmittedquoteSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.test.model.statusofsubmittedquote"));

	public statusofsubmittedquoteModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sosqId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSosqId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sosqId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return statusofsubmittedquote.class;
	}

	@Override
	public String getModelClassName() {
		return statusofsubmittedquote.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("sosqId", getSosqId());
		attributes.put("sosq", getSosq());
		attributes.put("winprob", getWinprob());
		attributes.put("aorderdate", getAorderdate());
		attributes.put("ppstartdate", getPpstartdate());
		attributes.put("ppenddate", getPpenddate());
		attributes.put("createDate", getCreateDate());
		attributes.put("customercomittype", getCustomercomittype());
		attributes.put("upload", getUpload());
		attributes.put("pon", getPon());
		attributes.put("valueofcommit", getValueofcommit());
		attributes.put("rmethod", getRmethod());
		attributes.put("rdate", getRdate());
		attributes.put("pcdc", getPcdc());
		attributes.put("onwhatbasis", getOnwhatbasis());
		attributes.put("recordproposedcourse", getRecordproposedcourse());
		attributes.put("comments", getComments());
		attributes.put("currrentId", getCurrrentId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long sosqId = (Long)attributes.get("sosqId");

		if (sosqId != null) {
			setSosqId(sosqId);
		}

		String sosq = (String)attributes.get("sosq");

		if (sosq != null) {
			setSosq(sosq);
		}

		String winprob = (String)attributes.get("winprob");

		if (winprob != null) {
			setWinprob(winprob);
		}

		String aorderdate = (String)attributes.get("aorderdate");

		if (aorderdate != null) {
			setAorderdate(aorderdate);
		}

		String ppstartdate = (String)attributes.get("ppstartdate");

		if (ppstartdate != null) {
			setPpstartdate(ppstartdate);
		}

		String ppenddate = (String)attributes.get("ppenddate");

		if (ppenddate != null) {
			setPpenddate(ppenddate);
		}

		String createDate = (String)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String customercomittype = (String)attributes.get("customercomittype");

		if (customercomittype != null) {
			setCustomercomittype(customercomittype);
		}

		String upload = (String)attributes.get("upload");

		if (upload != null) {
			setUpload(upload);
		}

		Long pon = (Long)attributes.get("pon");

		if (pon != null) {
			setPon(pon);
		}

		Long valueofcommit = (Long)attributes.get("valueofcommit");

		if (valueofcommit != null) {
			setValueofcommit(valueofcommit);
		}

		String rmethod = (String)attributes.get("rmethod");

		if (rmethod != null) {
			setRmethod(rmethod);
		}

		String rdate = (String)attributes.get("rdate");

		if (rdate != null) {
			setRdate(rdate);
		}

		String pcdc = (String)attributes.get("pcdc");

		if (pcdc != null) {
			setPcdc(pcdc);
		}

		String onwhatbasis = (String)attributes.get("onwhatbasis");

		if (onwhatbasis != null) {
			setOnwhatbasis(onwhatbasis);
		}

		String recordproposedcourse = (String)attributes.get(
				"recordproposedcourse");

		if (recordproposedcourse != null) {
			setRecordproposedcourse(recordproposedcourse);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}

		Integer currrentId = (Integer)attributes.get("currrentId");

		if (currrentId != null) {
			setCurrrentId(currrentId);
		}
	}

	@JSON
	@Override
	public long getSosqId() {
		return _sosqId;
	}

	@Override
	public void setSosqId(long sosqId) {
		_sosqId = sosqId;
	}

	@JSON
	@Override
	public String getSosq() {
		if (_sosq == null) {
			return StringPool.BLANK;
		}
		else {
			return _sosq;
		}
	}

	@Override
	public void setSosq(String sosq) {
		_sosq = sosq;
	}

	@JSON
	@Override
	public String getWinprob() {
		if (_winprob == null) {
			return StringPool.BLANK;
		}
		else {
			return _winprob;
		}
	}

	@Override
	public void setWinprob(String winprob) {
		_winprob = winprob;
	}

	@JSON
	@Override
	public String getAorderdate() {
		if (_aorderdate == null) {
			return StringPool.BLANK;
		}
		else {
			return _aorderdate;
		}
	}

	@Override
	public void setAorderdate(String aorderdate) {
		_aorderdate = aorderdate;
	}

	@JSON
	@Override
	public String getPpstartdate() {
		if (_ppstartdate == null) {
			return StringPool.BLANK;
		}
		else {
			return _ppstartdate;
		}
	}

	@Override
	public void setPpstartdate(String ppstartdate) {
		_ppstartdate = ppstartdate;
	}

	@JSON
	@Override
	public String getPpenddate() {
		if (_ppenddate == null) {
			return StringPool.BLANK;
		}
		else {
			return _ppenddate;
		}
	}

	@Override
	public void setPpenddate(String ppenddate) {
		_ppenddate = ppenddate;
	}

	@JSON
	@Override
	public String getCreateDate() {
		if (_createDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _createDate;
		}
	}

	@Override
	public void setCreateDate(String createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public String getCustomercomittype() {
		if (_customercomittype == null) {
			return StringPool.BLANK;
		}
		else {
			return _customercomittype;
		}
	}

	@Override
	public void setCustomercomittype(String customercomittype) {
		_customercomittype = customercomittype;
	}

	@JSON
	@Override
	public String getUpload() {
		if (_upload == null) {
			return StringPool.BLANK;
		}
		else {
			return _upload;
		}
	}

	@Override
	public void setUpload(String upload) {
		_upload = upload;
	}

	@JSON
	@Override
	public long getPon() {
		return _pon;
	}

	@Override
	public void setPon(long pon) {
		_pon = pon;
	}

	@JSON
	@Override
	public long getValueofcommit() {
		return _valueofcommit;
	}

	@Override
	public void setValueofcommit(long valueofcommit) {
		_valueofcommit = valueofcommit;
	}

	@JSON
	@Override
	public String getRmethod() {
		if (_rmethod == null) {
			return StringPool.BLANK;
		}
		else {
			return _rmethod;
		}
	}

	@Override
	public void setRmethod(String rmethod) {
		_rmethod = rmethod;
	}

	@JSON
	@Override
	public String getRdate() {
		if (_rdate == null) {
			return StringPool.BLANK;
		}
		else {
			return _rdate;
		}
	}

	@Override
	public void setRdate(String rdate) {
		_rdate = rdate;
	}

	@JSON
	@Override
	public String getPcdc() {
		if (_pcdc == null) {
			return StringPool.BLANK;
		}
		else {
			return _pcdc;
		}
	}

	@Override
	public void setPcdc(String pcdc) {
		_pcdc = pcdc;
	}

	@JSON
	@Override
	public String getOnwhatbasis() {
		if (_onwhatbasis == null) {
			return StringPool.BLANK;
		}
		else {
			return _onwhatbasis;
		}
	}

	@Override
	public void setOnwhatbasis(String onwhatbasis) {
		_onwhatbasis = onwhatbasis;
	}

	@JSON
	@Override
	public String getRecordproposedcourse() {
		if (_recordproposedcourse == null) {
			return StringPool.BLANK;
		}
		else {
			return _recordproposedcourse;
		}
	}

	@Override
	public void setRecordproposedcourse(String recordproposedcourse) {
		_recordproposedcourse = recordproposedcourse;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@JSON
	@Override
	public Integer getCurrrentId() {
		return _currrentId;
	}

	@Override
	public void setCurrrentId(Integer currrentId) {
		_currrentId = currrentId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			statusofsubmittedquote.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public statusofsubmittedquote toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (statusofsubmittedquote)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		statusofsubmittedquoteImpl statusofsubmittedquoteImpl = new statusofsubmittedquoteImpl();

		statusofsubmittedquoteImpl.setSosqId(getSosqId());
		statusofsubmittedquoteImpl.setSosq(getSosq());
		statusofsubmittedquoteImpl.setWinprob(getWinprob());
		statusofsubmittedquoteImpl.setAorderdate(getAorderdate());
		statusofsubmittedquoteImpl.setPpstartdate(getPpstartdate());
		statusofsubmittedquoteImpl.setPpenddate(getPpenddate());
		statusofsubmittedquoteImpl.setCreateDate(getCreateDate());
		statusofsubmittedquoteImpl.setCustomercomittype(getCustomercomittype());
		statusofsubmittedquoteImpl.setUpload(getUpload());
		statusofsubmittedquoteImpl.setPon(getPon());
		statusofsubmittedquoteImpl.setValueofcommit(getValueofcommit());
		statusofsubmittedquoteImpl.setRmethod(getRmethod());
		statusofsubmittedquoteImpl.setRdate(getRdate());
		statusofsubmittedquoteImpl.setPcdc(getPcdc());
		statusofsubmittedquoteImpl.setOnwhatbasis(getOnwhatbasis());
		statusofsubmittedquoteImpl.setRecordproposedcourse(getRecordproposedcourse());
		statusofsubmittedquoteImpl.setComments(getComments());
		statusofsubmittedquoteImpl.setCurrrentId(getCurrrentId());

		statusofsubmittedquoteImpl.resetOriginalValues();

		return statusofsubmittedquoteImpl;
	}

	@Override
	public int compareTo(statusofsubmittedquote statusofsubmittedquote) {
		long primaryKey = statusofsubmittedquote.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof statusofsubmittedquote)) {
			return false;
		}

		statusofsubmittedquote statusofsubmittedquote = (statusofsubmittedquote)obj;

		long primaryKey = statusofsubmittedquote.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<statusofsubmittedquote> toCacheModel() {
		statusofsubmittedquoteCacheModel statusofsubmittedquoteCacheModel = new statusofsubmittedquoteCacheModel();

		statusofsubmittedquoteCacheModel.sosqId = getSosqId();

		statusofsubmittedquoteCacheModel.sosq = getSosq();

		String sosq = statusofsubmittedquoteCacheModel.sosq;

		if ((sosq != null) && (sosq.length() == 0)) {
			statusofsubmittedquoteCacheModel.sosq = null;
		}

		statusofsubmittedquoteCacheModel.winprob = getWinprob();

		String winprob = statusofsubmittedquoteCacheModel.winprob;

		if ((winprob != null) && (winprob.length() == 0)) {
			statusofsubmittedquoteCacheModel.winprob = null;
		}

		statusofsubmittedquoteCacheModel.aorderdate = getAorderdate();

		String aorderdate = statusofsubmittedquoteCacheModel.aorderdate;

		if ((aorderdate != null) && (aorderdate.length() == 0)) {
			statusofsubmittedquoteCacheModel.aorderdate = null;
		}

		statusofsubmittedquoteCacheModel.ppstartdate = getPpstartdate();

		String ppstartdate = statusofsubmittedquoteCacheModel.ppstartdate;

		if ((ppstartdate != null) && (ppstartdate.length() == 0)) {
			statusofsubmittedquoteCacheModel.ppstartdate = null;
		}

		statusofsubmittedquoteCacheModel.ppenddate = getPpenddate();

		String ppenddate = statusofsubmittedquoteCacheModel.ppenddate;

		if ((ppenddate != null) && (ppenddate.length() == 0)) {
			statusofsubmittedquoteCacheModel.ppenddate = null;
		}

		statusofsubmittedquoteCacheModel.createDate = getCreateDate();

		String createDate = statusofsubmittedquoteCacheModel.createDate;

		if ((createDate != null) && (createDate.length() == 0)) {
			statusofsubmittedquoteCacheModel.createDate = null;
		}

		statusofsubmittedquoteCacheModel.customercomittype = getCustomercomittype();

		String customercomittype = statusofsubmittedquoteCacheModel.customercomittype;

		if ((customercomittype != null) && (customercomittype.length() == 0)) {
			statusofsubmittedquoteCacheModel.customercomittype = null;
		}

		statusofsubmittedquoteCacheModel.upload = getUpload();

		String upload = statusofsubmittedquoteCacheModel.upload;

		if ((upload != null) && (upload.length() == 0)) {
			statusofsubmittedquoteCacheModel.upload = null;
		}

		statusofsubmittedquoteCacheModel.pon = getPon();

		statusofsubmittedquoteCacheModel.valueofcommit = getValueofcommit();

		statusofsubmittedquoteCacheModel.rmethod = getRmethod();

		String rmethod = statusofsubmittedquoteCacheModel.rmethod;

		if ((rmethod != null) && (rmethod.length() == 0)) {
			statusofsubmittedquoteCacheModel.rmethod = null;
		}

		statusofsubmittedquoteCacheModel.rdate = getRdate();

		String rdate = statusofsubmittedquoteCacheModel.rdate;

		if ((rdate != null) && (rdate.length() == 0)) {
			statusofsubmittedquoteCacheModel.rdate = null;
		}

		statusofsubmittedquoteCacheModel.pcdc = getPcdc();

		String pcdc = statusofsubmittedquoteCacheModel.pcdc;

		if ((pcdc != null) && (pcdc.length() == 0)) {
			statusofsubmittedquoteCacheModel.pcdc = null;
		}

		statusofsubmittedquoteCacheModel.onwhatbasis = getOnwhatbasis();

		String onwhatbasis = statusofsubmittedquoteCacheModel.onwhatbasis;

		if ((onwhatbasis != null) && (onwhatbasis.length() == 0)) {
			statusofsubmittedquoteCacheModel.onwhatbasis = null;
		}

		statusofsubmittedquoteCacheModel.recordproposedcourse = getRecordproposedcourse();

		String recordproposedcourse = statusofsubmittedquoteCacheModel.recordproposedcourse;

		if ((recordproposedcourse != null) &&
				(recordproposedcourse.length() == 0)) {
			statusofsubmittedquoteCacheModel.recordproposedcourse = null;
		}

		statusofsubmittedquoteCacheModel.comments = getComments();

		String comments = statusofsubmittedquoteCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			statusofsubmittedquoteCacheModel.comments = null;
		}

		statusofsubmittedquoteCacheModel.currrentId = getCurrrentId();

		return statusofsubmittedquoteCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{sosqId=");
		sb.append(getSosqId());
		sb.append(", sosq=");
		sb.append(getSosq());
		sb.append(", winprob=");
		sb.append(getWinprob());
		sb.append(", aorderdate=");
		sb.append(getAorderdate());
		sb.append(", ppstartdate=");
		sb.append(getPpstartdate());
		sb.append(", ppenddate=");
		sb.append(getPpenddate());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", customercomittype=");
		sb.append(getCustomercomittype());
		sb.append(", upload=");
		sb.append(getUpload());
		sb.append(", pon=");
		sb.append(getPon());
		sb.append(", valueofcommit=");
		sb.append(getValueofcommit());
		sb.append(", rmethod=");
		sb.append(getRmethod());
		sb.append(", rdate=");
		sb.append(getRdate());
		sb.append(", pcdc=");
		sb.append(getPcdc());
		sb.append(", onwhatbasis=");
		sb.append(getOnwhatbasis());
		sb.append(", recordproposedcourse=");
		sb.append(getRecordproposedcourse());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append(", currrentId=");
		sb.append(getCurrrentId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("com.test.model.statusofsubmittedquote");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>sosqId</column-name><column-value><![CDATA[");
		sb.append(getSosqId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sosq</column-name><column-value><![CDATA[");
		sb.append(getSosq());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>winprob</column-name><column-value><![CDATA[");
		sb.append(getWinprob());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>aorderdate</column-name><column-value><![CDATA[");
		sb.append(getAorderdate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ppstartdate</column-name><column-value><![CDATA[");
		sb.append(getPpstartdate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ppenddate</column-name><column-value><![CDATA[");
		sb.append(getPpenddate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customercomittype</column-name><column-value><![CDATA[");
		sb.append(getCustomercomittype());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>upload</column-name><column-value><![CDATA[");
		sb.append(getUpload());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pon</column-name><column-value><![CDATA[");
		sb.append(getPon());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>valueofcommit</column-name><column-value><![CDATA[");
		sb.append(getValueofcommit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rmethod</column-name><column-value><![CDATA[");
		sb.append(getRmethod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rdate</column-name><column-value><![CDATA[");
		sb.append(getRdate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pcdc</column-name><column-value><![CDATA[");
		sb.append(getPcdc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>onwhatbasis</column-name><column-value><![CDATA[");
		sb.append(getOnwhatbasis());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recordproposedcourse</column-name><column-value><![CDATA[");
		sb.append(getRecordproposedcourse());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currrentId</column-name><column-value><![CDATA[");
		sb.append(getCurrrentId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = statusofsubmittedquote.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			statusofsubmittedquote.class
		};
	private long _sosqId;
	private String _sosq;
	private String _winprob;
	private String _aorderdate;
	private String _ppstartdate;
	private String _ppenddate;
	private String _createDate;
	private String _customercomittype;
	private String _upload;
	private long _pon;
	private long _valueofcommit;
	private String _rmethod;
	private String _rdate;
	private String _pcdc;
	private String _onwhatbasis;
	private String _recordproposedcourse;
	private String _comments;
	private Integer _currrentId;
	private statusofsubmittedquote _escapedModel;
}